<Application x:Class="My_Weather.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:My_Weather"
             Startup="Application_Startup">
            <!--StartupUri="MainWindow.xaml">-->

    <Application.Resources>

        <!-- Label left style -->
        <Style x:Key="labelLeftStyle">
            <Setter Property="Label.VerticalAlignment" Value="Center"></Setter>
            <Setter Property="Label.HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="Label.FontSize" Value="16"></Setter>
            <Setter Property="Label.FontFamily" Value="Fonts/#Arial Narrow"></Setter> <!--Название добавленного шрифта (сжатый Arial) из папки Fonts-->
            <Setter Property="Label.Padding" Value="10,5,0,5"></Setter>
            <Setter Property="TextBlock.Padding" Value="10,5,0,5"></Setter>
        </Style>

        <!-- Label right style -->
        <Style x:Key="labelRightStyle">
            <Setter Property="Label.VerticalAlignment" Value="Center"></Setter>
            <Setter Property="Label.HorizontalAlignment" Value="Right"></Setter>
            <Setter Property="Label.FontSize" Value="18"></Setter>
            <!--<Setter Property="Label.FontFamily" Value="Arial Narrow, Univers Condensed"></Setter>-->
            <Setter Property="Label.FontFamily" Value="Fonts/#Arial Narrow"></Setter>
            <Setter Property="Label.Padding" Value="0,5,10,5"></Setter>
            <Setter Property="Label.HorizontalContentAlignment" Value="Right"></Setter>
        </Style>

        <!-- Border bottom -->
        <Style x:Key="borderBottomStyle">
            <Setter Property="Border.BorderThickness" Value="0,0,0,1"></Setter>
            <Setter Property="Border.BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"></Setter>
            <Setter Property="Border.Margin" Value="10,0"></Setter>
        </Style>

        <!-- Для ListboxLang -->
        <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
        <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#6C2D1A72"/>
        <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
        <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>
        <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                    <Condition Property="IsSelected" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Для кнопок меню-->
        
        <Storyboard x:Key="ChangeBackgroundStoryboard">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background">
                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource ButtonBrush}" />
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
        
        <ControlTemplate x:Key="ButtonTemplate" TargetType="Button">
            <Border x:Name="Border" BorderBrush="Gray" BorderThickness="3" CornerRadius="2"
                    TextBlock.Foreground="White" RenderTransformOrigin="0.5,0.5">
                <Border.Background>
                    <LinearGradientBrush>
                        <GradientStopCollection>
                            <GradientStop Offset="0" Color="Blue"></GradientStop>
                            <GradientStop Offset="1" Color="LightCoral"></GradientStop>
                        </GradientStopCollection>
                    </LinearGradientBrush>
                </Border.Background>
                <ContentPresenter RecognizesAccessKey="True" Margin="{TemplateBinding Padding}"></ContentPresenter>
                <Border.RenderTransform>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                </Border.RenderTransform>

            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="Red"></Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter TargetName="Border" Property="BorderBrush" Value="Yellow"></Setter>
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard TargetName="Border">
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To=".9" Duration="0:0:.2">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To=".9" Duration="0:0:.2">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard TargetName="Border">
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:.2" />
                                <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:.2" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
                <!--Если кнопка меню в фокусе.-->
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="Yellow"></Setter>
                    <Setter TargetName="Border" Property="TextBlock.Foreground" Value="Black"></Setter>
                    <Setter TargetName="Border" Property="TextBlock.FontWeight" Value="Bold"></Setter>
                </Trigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>

    </Application.Resources>
</Application>
